// This script is designed to be called from the command line by another process, like our Julia agent.

// --- Import Dependencies ---
const anchor = require('@coral-xyz/anchor');
const { Program } = require('@coral-xyz/anchor');
const { Keypair, Connection, PublicKey, SystemProgram } = require('@solana/web3.js');
const fs = require('fs');
const yargs = require('yargs/yargs');
const { hideBin } = require('yargs/helpers');

// --- Main Execution Function ---
async function main() {
    // --- 1. Parse Command-Line Arguments ---
    const argv = yargs(hideBin(process.argv)).options({
        contract: { type: 'string', demandOption: true, alias: 'c', describe: 'The Program ID of the Solana contract.' },
        wallet: { type: 'string', demandOption: true, alias: 'w', describe: 'Path to the authority wallet keypair file.' },
        url: { type: 'string', default: 'http://127.0.0.1:8899', alias: 'u', describe: 'The Solana RPC URL.' },
        hash: { type: 'string', demandOption: true, describe: 'The code hash to be logged.' }
    }).argv;

    try {
        // --- 2. Setup Connection and Wallet ---
        const connection = new Connection(argv.url, 'confirmed');
        const secretKey = JSON.parse(fs.readFileSync(argv.wallet, 'utf8'));
        const authorityWallet = Keypair.fromSecretKey(new Uint8Array(secretKey));

        // Configure the Anchor provider
        const provider = new anchor.AnchorProvider(connection, new anchor.Wallet(authorityWallet), {
            preflightCommitment: 'confirmed',
        });
        anchor.setProvider(provider);

        // --- 3. Load the Contract ---
        // The IDL (Interface Definition Language) is a JSON file that describes your program.
        // It's generated by `anchor build` and located in the `target/idl` directory.
        const idlPath = '../contribution_log/target/idl/contribution_log.json';
        const idl = JSON.parse(fs.readFileSync(idlPath, 'utf8'));
        const programId = new PublicKey(argv.contract);
        const program = new Program(idl, programId, provider);

        // --- 4. Find the Program-Derived Address (PDA) for our state ---
        const [logStatePDA] = await PublicKey.findProgramAddress(
            [Buffer.from("log_state")], // The same seed used in the contract
            program.programId
        );

        // --- 5. Call the 'log_contribution' Instruction ---
        const txSignature = await program.methods
            .logContribution(argv.hash) // Pass the code hash to the instruction
            .accounts({
                logState: logStatePDA,
                authority: authorityWallet.publicKey,
                systemProgram: SystemProgram.programId,
            })
            .signers([authorityWallet]) // The authority must sign
            .rpc();

        // --- 6. Output the Transaction Signature ---
        // The Julia agent will capture this output.
        process.stdout.write(txSignature);

    } catch (error) {
        // If anything fails, write the error to stderr so the Julia agent can capture it.
        process.stderr.write(error.toString());
        process.exit(1); // Exit with a non-zero code to indicate failure
    }
}

main();
